# services:

#   combined:
#     build:
#       context: ./combined
#     ports:
#       - "5001:5000"
#     environment:
#       - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
#       - OTEL_RESOURCE_ATTRIBUTES=service.name=combined
#       - OTEL_METRICS_EXPORTER=otlp

# #   upper:
# #     # image: tiffanyfay/to-upper:py
# #     build:
# #       context: ./upper
# #     ports:
# #       - "5001:5000"
# #     environment:
# #       - OTEL_EXPORTER_OTLP_ENDPOINT=alloy:4317
# #       - OTEL_SERVICE_NAME=upper
# #       - OTEL_RESOURCE_ATTRIBUTES=service.name=upper
# #       - OTEL_METRICS_EXPORTER=otlp     

# #   lower: 
# #     # image: tiffanyfay/to-lower:py
# #     build:    
# #       context: ./lower
# #     ports:
# #       - "5002:5000"
# #     environment:
# #       - OTEL_EXPORTER_OTLP_ENDPOINT=alloy:4317
# #       - OTEL_SERVICE_NAME=lower
# #       - OTEL_RESOURCE_ATTRIBUTES=service.name=lower
# #       - OTEL_METRICS_EXPORTER=otlp

#   # converter: 
#   #   # image: tiffanyfay/to-lower:py
#   #   build:
#   #     context: ./converter
#   #   ports:
#   #     - "5003:5000"
#   #   environment:
#   #     - OTEL_EXPORTER_OTLP_ENDPOINT=alloy:4317
#   #     - OTEL_SERVICE_NAME=lower
#   #     - OTEL_RESOURCE_ATTRIBUTES=service.name=lower
#   #     - OTEL_METRICS_EXPORTER=otlp
#   #     - OTEL_TRACES_EXPORTER=otlp
#   #     - UPPER_URL=http://upper:5000/
#   #     - LOWER_URL=http://lower:5000/

#   # Tempo runs as user 10001, and docker compose creates the volume as root.
#   # As such, we need to chown the volume in order for Tempo to start correctly.
#   init:
#     image: &tempoImage grafana/tempo:latest
#     user: root
#     entrypoint:
#       - "chown"
#       - "10001:10001"
#       - "/var/tempo"
#     volumes:
#       - ./tempo-data:/var/tempo

#   tempo:
#     image: *tempoImage
#     command: [ "-config.file=/etc/tempo.yaml" ]
#     volumes:
#       - ./config/tempo.yaml:/etc/tempo.yaml
#       - ./tempo-data:/var/tempo
#     ports:
#       - "3200" # tempo
#       - "4317" # otlp grpc
#     depends_on:
#       - init

#   # # Generate fake traces...
#   # k6-tracing:
#   #   image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
#   #   environment:
#   #     - ENDPOINT=alloy:4317
#   #   restart: always
#   #   depends_on:
#   #     - tempo
#   #     - alloy

#   # And put them in a Grafana Alloy pipeline...
#   # alloy:
#   #   image: grafana/alloy:v1.3.1
#   #   volumes:
#   #     - ./config/config.alloy:/etc/alloy/config.alloy
#   #   command:
#   #     - run
#   #     - /etc/alloy/config.alloy
#   #     - --storage.path=/var/lib/alloy/data
#   #     - --server.http.listen-addr=0.0.0.0:12345
#   #   ports:
#   #     - "12345:12345"
#   #     - "4319:4319"
#   #   depends_on:
#   #     - tempo

#   prometheus:
#     image: prom/prometheus:latest
#     command:
#       - --config.file=/etc/prometheus.yaml
#       - --web.enable-remote-write-receiver
#       - --enable-feature=exemplar-storage
#       - --enable-feature=native-histograms
#     volumes:
#       - ./config/prometheus.yaml:/etc/prometheus.yaml
#     ports:
#       - "9090:9090"

#   otelcol:
#     image: otel/opentelemetry-collector:0.86.0
#     command: [ "--config=/etc/otel-collector.yaml" ]
#     volumes:
#       - ./config/otel-collector-config.yml:/etc/otel-collector.yaml
#     ports:
#       - "4317:4317"   # OTLP gRPC receiver
#       - "4318:4318"
#     depends_on:
#     # - jaeger
#     - tempo

#   grafana:
#     image: grafana/grafana:11.2.0
#     volumes:
#       - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
#     environment:
#       - GF_AUTH_ANONYMOUS_ENABLED=true
#       - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#       - GF_AUTH_DISABLE_LOGIN_FORM=true
#       - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
#     ports:
#       - "3000:3000"


# ------------------------------------------------------------
services:

### APPLICATION PART

 

  combined:
    build:
      context: ./combined
    ports:
      - "5001:5001"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=todoui-flask
      - OTEL_METRICS_EXPORTER=otlp
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_PYTHON_DISABLED_INSTRUMENTATIONS=aws_lambda



### OTEL PART

  # jaegercol:
  #   image: jaegertracing/all-in-one:latest
  #   environment:
  #     - COLLECTOR_OTLP_ENABLED=true
  #   ports:
  #     - "16686:16686"
  #     - "4317:4317"

#   jaeger:
#     image: ${JAEGERTRACING_IMAGE}
#     networks:
#       - todonet
#     command:
#       - "--memory.max-traces=5000"
#       - "--prometheus.server-url=http://prometheus:9090"
#       - "--prometheus.query.normalize-calls=true"
#       - "--prometheus.query.normalize-duration=true"
#  #      - "--query.base-path=/jaeger/ui"
#     ports:
#       - "16686:16686"
#     restart: unless-stopped
#     environment:
#       - METRICS_STORAGE_TYPE=prometheus

  # otelcol:
  #   image: ${COLLECTOR_CONTRIB_IMAGE}
  #   restart: unless-stopped
  #   networks:
  #     - todonet
  #   command: ["--config=/etc/otel-collector-config.yml", ""]
  #   volumes:
  #     - ./collector/otel-collector-config.yml:/etc/otel-collector-config.yml
  #   ports:
  #     - "4317:4317"   # OTLP gRPC receiver
  #     - "4318:4318"
  #   depends_on:
  #     - jaeger
  #     - tempo

  otelcol:
    image: otel/opentelemetry-collector:0.86.0
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./shared/otel-collector-config.yml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"
    depends_on:
    # - jaeger
    - tempo

  # Prometheus
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./shared/prometheus.yaml:/etc/prometheus/prometheus-config.yaml
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"

  init:
    image: &tempoImage grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./tempo-data:/var/tempo
  # Generate fake traces...
  # k6-tracing:
  #   image: ghcr.io/grafana/xk6-client-tracing:v0.0.5
  #   environment:
  #     - ENDPOINT=otelcol:4317
  #   restart: always
  #   depends_on:
  #     - otelcol

  tempo:
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./shared/tempo.yaml:/etc/tempo.yaml
      - ./tempo-data:/var/tempo
    ports:
      - "3200:3200" # tempo
      - "5555:4317" # otlp grpc
    depends_on:
      - init

  grafana:
    image: grafana/grafana:11.0.0
    volumes:
      - ./shared/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"


#   # opensearch:
#   #   image: ${OPENSEARCH_IMAGE}
#   #   container_name: opensearch
#   #   deploy:
#   #     resources:
#   #       limits:
#   #         memory: 1G
#   #   restart: unless-stopped
#   #   environment:
#   #     - cluster.name=demo-cluster
#   #     - node.name=demo-node
#   #     - bootstrap.memory_lock=true
#   #     - discovery.type=single-node
#   #     - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
#   #     - DISABLE_INSTALL_DEMO_CONFIG=true
#   #     - DISABLE_SECURITY_PLUGIN=true
#   #   ports:
#   #     - "9200:9200"
